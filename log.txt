In file included from ./test/list_test.cpp:13:
./test/../list.hpp:57:31: error: cannot refer to type member 'node' in 'ft::list_iterator<int>' with '->'
                self & operator++() { this->node = this->node->next; return *this; }
                                            ^
./test/../list.hpp:305:34: note: in instantiation of member function 'ft::list_iterator<int>::operator++' requested here
                                iterator itr = first; while (++itr != last) { erase(itr); }
                                                             ^
./test/../list.hpp:338:19: note: in instantiation of member function 'ft::list<int, std::__1::allocator<int> >::erase' requested here
                        void clear() { erase(begin(), end()); }
                                       ^
./test/../list.hpp:204:14: note: in instantiation of member function 'ft::list<int, std::__1::allocator<int> >::clear' requested here
                        ~list() { clear(); delete _last; }
                                  ^
./test/list_test.cpp:34:17: note: in instantiation of member function 'ft::list<int, std::__1::allocator<int> >::~list' requested here
                ft::list<int> m;
                              ^
./test/../list.hpp:37:32: note: member 'node' declared here
                typedef list_node<T>                                                            *node;
                                                                                                 ^
./test/../list.hpp:67:15: error: cannot refer to type member 'node' in 'const ft::list_iterator<int>::self' (aka 'const list_iterator<int>') with '.'
                {       return (x.node != y.node); }
                                  ^
./test/../list.hpp:305:40: note: in instantiation of member function 'ft::operator!=' requested here
                                iterator itr = first; while (++itr != last) { erase(itr); }
                                                                   ^
./test/../list.hpp:338:19: note: in instantiation of member function 'ft::list<int, std::__1::allocator<int> >::erase' requested here
                        void clear() { erase(begin(), end()); }
                                       ^
./test/../list.hpp:204:14: note: in instantiation of member function 'ft::list<int, std::__1::allocator<int> >::clear' requested here
                        ~list() { clear(); delete _last; }
                                  ^
./test/list_test.cpp:34:17: note: in instantiation of member function 'ft::list<int, std::__1::allocator<int> >::~list' requested here
                ft::list<int> m;
                              ^
./test/../list.hpp:37:32: note: member 'node' declared here
                typedef list_node<T>                                                            *node;
                                                                                                 ^
./test/../list.hpp:296:28: error: cannot refer to type member 'node' in 'ft::list<int, std::__1::allocator<int> >::iterator' (aka 'list_iterator<int>') with '.'
                                iterator next(position.node->next);
                                                       ^
./test/../list.hpp:305:51: note: in instantiation of member function 'ft::list<int, std::__1::allocator<int> >::erase' requested here
                                iterator itr = first; while (++itr != last) { erase(itr); }
                                                                              ^
./test/../list.hpp:338:19: note: in instantiation of member function 'ft::list<int, std::__1::allocator<int> >::erase' requested here
                        void clear() { erase(begin(), end()); }
                                       ^
./test/../list.hpp:204:14: note: in instantiation of member function 'ft::list<int, std::__1::allocator<int> >::clear' requested here
                        ~list() { clear(); delete _last; }
                                  ^
./test/list_test.cpp:34:17: note: in instantiation of member function 'ft::list<int, std::__1::allocator<int> >::~list' requested here
                ft::list<int> m;
                              ^
./test/../list.hpp:37:32: note: member 'node' declared here
                typedef list_node<T>                                                            *node;
                                                                                                 ^
./test/../list.hpp:297:28: error: cannot refer to type member 'node' in 'ft::list<int, std::__1::allocator<int> >::iterator' (aka 'list_iterator<int>') with '.'
                                node * node = position.node; _unlinkNode(node);
                                                       ^
./test/../list.hpp:37:32: note: member 'node' declared here
                typedef list_node<T>                                                            *node;
                                                                                                 ^
./test/list_test.cpp:24:24: error: cannot increment value of type 'typename list<int, allocator<int> >::iterator' (aka 'list_iterator<int>')
        for (; it != l.end(); ++it)
                              ^ ~~
./test/list_test.cpp:35:3: note: in instantiation of function template specialization 'print<ft::list<int, std::__1::allocator<int> > >' requested here
                print(m);
                ^
In file included from ./test/list_test.cpp:13:
./test/../list.hpp:271:65: error: cannot refer to type member 'node' in 'ft::list<int, std::__1::allocator<int> >::iterator' (aka 'list_iterator<int>') with '.'
                                node *newnode = _allocateNode(val); node *before = position.node->prev;
                                                                                            ^
./test/../list.hpp:279:21: note: in instantiation of member function 'ft::list<int, std::__1::allocator<int> >::insert' requested here
                                { while (n--) { insert(position, val); } }
                                                ^
./test/../list.hpp:176:5: note: in instantiation of member function 'ft::list<int, std::__1::allocator<int> >::insert' requested here
                                insert(end(), n, val);
                                ^
./test/list_test.cpp:44:17: note: in instantiation of member function 'ft::list<int, std::__1::allocator<int> >::list' requested here
                ft::list<int> fill(10, 10);
                              ^
./test/../list.hpp:37:32: note: member 'node' declared here
                typedef list_node<T>                                                            *node;
                                                                                                 ^
./test/../list.hpp:273:30: error: cannot refer to type member 'node' in 'ft::list<int, std::__1::allocator<int> >::iterator' (aka 'list_iterator<int>') with '.'
                                newnode->next = position.node; position.node->prev = newnode;
                                                         ^
./test/../list.hpp:37:32: note: member 'node' declared here
                typedef list_node<T>                                                            *node;
                                                                                                 ^
./test/../list.hpp:273:45: error: cannot refer to type member 'node' in 'ft::list<int, std::__1::allocator<int> >::iterator' (aka 'list_iterator<int>') with '.'
                                newnode->next = position.node; position.node->prev = newnode;
                                                                        ^
./test/../list.hpp:37:32: note: member 'node' declared here
                typedef list_node<T>                                                            *node;
                                                                                                 ^
./test/../list.hpp:274:5: error: void function 'insert' should not return a value [-Wreturn-type]
                                return (--position);
                                ^      ~~~~~~~~~~~~
./test/../list.hpp:60:31: error: cannot refer to type member 'node' in 'ft::list_iterator<int>' with '->'
                self & operator--() { this->node = this->node->prev; return *this; }
                                            ^
./test/../list.hpp:274:13: note: in instantiation of member function 'ft::list_iterator<int>::operator--' requested here
                                return (--position);
                                        ^
./test/../list.hpp:279:21: note: in instantiation of member function 'ft::list<int, std::__1::allocator<int> >::insert' requested here
                                { while (n--) { insert(position, val); } }
                                                ^
./test/../list.hpp:176:5: note: in instantiation of member function 'ft::list<int, std::__1::allocator<int> >::insert' requested here
                                insert(end(), n, val);
                                ^
./test/list_test.cpp:44:17: note: in instantiation of member function 'ft::list<int, std::__1::allocator<int> >::list' requested here
                ft::list<int> fill(10, 10);
                              ^
./test/../list.hpp:37:32: note: member 'node' declared here
                typedef list_node<T>                                                            *node;
                                                                                                 ^
./test/../list.hpp:264:7: error: no matching member function for call to 'insert'
                                { insert(begin(), _allocateNode(val)); }
                                  ^~~~~~
./test/list_test.cpp:53:6: note: in instantiation of member function 'ft::list<int, std::__1::allocator<int> >::push_back' requested here
                        m.push_back(i);
                          ^
./test/../list.hpp:283:9: note: candidate function template not viable: requires at least 3 arguments, but 2 were provided
                        void insert(iterator position, InputIterator first, InputIterator last,
                             ^
./test/../list.hpp:278:9: note: candidate function not viable: requires 3 arguments, but 2 were provided
                        void insert(iterator position, size_type n, const value_type & val)
                             ^
./test/../list.hpp:213:31: error: no matching conversion for functional-style cast from 'list_node<int> *' to 'ft::list<int, std::__1::allocator<int> >::iterator' (aka 'list_iterator<int>')
                        iterator begin() { return (iterator(_last->next)); }
                                                   ^~~~~~~~~~~~~~~~~~~~
./test/list_test.cpp:60:25: note: in instantiation of member function 'ft::list<int, std::__1::allocator<int> >::begin' requested here
                ft::list<int> range(m.begin(), m.end());
                                      ^
./test/../list.hpp:47:3: note: candidate constructor not viable: no known conversion from 'list_node<int> *' to 'ft::list_iterator<int>::node *' (aka 'list_node<int> **') for 1st argument; take the address of the argument with &
                list_iterator(node * srcnode) : node(srcnode) {}
                ^
./test/../list.hpp:48:3: note: candidate constructor not viable: no known conversion from 'list_node<int> *' to 'const ft::list_iterator<int>::self' (aka 'const list_iterator<int>') for 1st argument
                list_iterator(const self & other) : node(other.node) {}
                ^
./test/../list.hpp:46:3: note: candidate constructor not viable: requires 0 arguments, but 1 was provided
                list_iterator() : node(nullptr) {}
                ^
./test/../list.hpp:216:29: error: no matching conversion for functional-style cast from 'ft::list<int, std::__1::allocator<int> >::node *' (aka 'list_node<int> *') to 'ft::list<int, std::__1::allocator<int> >::iterator' (aka 'list_iterator<int>')
                        iterator end() { return (iterator(_last)); }
                                                 ^~~~~~~~~~~~~~
./test/list_test.cpp:60:36: note: in instantiation of member function 'ft::list<int, std::__1::allocator<int> >::end' requested here
                ft::list<int> range(m.begin(), m.end());
                                                 ^
./test/../list.hpp:47:3: note: candidate constructor not viable: no known conversion from 'ft::list<int, std::__1::allocator<int> >::node *' (aka 'list_node<int> *') to 'ft::list_iterator<int>::node *' (aka 'list_node<int> **') for 1st argument; take the address of the argument with &
                list_iterator(node * srcnode) : node(srcnode) {}
                ^
./test/../list.hpp:48:3: note: candidate constructor not viable: no known conversion from 'ft::list<int, std::__1::allocator<int> >::node *' (aka 'list_node<int> *') to 'const ft::list_iterator<int>::self' (aka 'const list_iterator<int>') for 1st argument
                list_iterator(const self & other) : node(other.node) {}
                ^
./test/../list.hpp:46:3: note: candidate constructor not viable: requires 0 arguments, but 1 was provided
                list_iterator() : node(nullptr) {}
                ^
./test/../list.hpp:48:50: error: cannot refer to type member 'node' in 'const ft::list_iterator<int>::self' (aka 'const list_iterator<int>') with '.'
                list_iterator(const self & other) : node(other.node) {}
                                                               ^
./test/list_test.cpp:60:23: note: in instantiation of member function 'ft::list_iterator<int>::list_iterator' requested here
                ft::list<int> range(m.begin(), m.end());
                                    ^
./test/../list.hpp:37:32: note: member 'node' declared here
                typedef list_node<T>                                                            *node;
                                                                                                 ^
./test/../list.hpp:46:21: error: constructor initializer 'ft::list_iterator<int>::node' (aka 'list_node<int> *') does not name a class
                list_iterator() : node(nullptr) {}
                                  ^~~~
./test/../list.hpp:185:36: note: in instantiation of member function 'ft::list_iterator<int>::list_iterator' requested here
                                                        InputIterator>::type iter = InputIterator())
                                                                                    ^
./test/../list.hpp:187:11: error: no viable overloaded '='
                        { iter = nullptr;
                          ~~~~ ^ ~~~~~~~
./test/list_test.cpp:60:17: note: in instantiation of function template specialization 'ft::list<int, std::__1::allocator<int> >::list<ft::list_iterator<int> >' requested here
                ft::list<int> range(m.begin(), m.end());
                              ^
./test/../list.hpp:51:10: note: candidate function not viable: no known conversion from 'std::__1::nullptr_t' to 'const ft::list_iterator<int>::self' (aka 'const list_iterator<int>') for 1st argument
                self & operator=(const self & rhs) {
                       ^
./test/../list.hpp:285:38: error: no matching constructor for initialization of 'ft::list_iterator<int>'
                                                                        InputIterator>::type iter = InputIterator())
                                                                                                    ^
./test/../list.hpp:191:5: note: in instantiation of default function argument expression for 'insert<ft::list_iterator<int> >' required here
                                insert(end(), first, last);
                                ^
./test/list_test.cpp:60:17: note: in instantiation of function template specialization 'ft::list<int, std::__1::allocator<int> >::list<ft::list_iterator<int> >' requested here
                ft::list<int> range(m.begin(), m.end());
                              ^
./test/../list.hpp:47:3: note: candidate constructor not viable: requires single argument 'srcnode', but no arguments were provided
                list_iterator(node * srcnode) : node(srcnode) {}
                ^
./test/../list.hpp:48:3: note: candidate constructor not viable: requires single argument 'other', but no arguments were provided
                list_iterator(const self & other) : node(other.node) {}
                ^
./test/../list.hpp:104:15: error: redefinition of 'operator=='
                friend bool     operator==(const self & x, const self & y)
                                ^
./test/../list.hpp:217:35: note: in instantiation of template class 'ft::list_const_iterator<int>' requested here
                        iterator end() const { return (const_iterator(_last)); }
                                                       ^
./test/../list.hpp:191:12: note: in instantiation of member function 'ft::list<int, std::__1::allocator<int> >::end' requested here
                                insert(end(), first, last);
                                       ^
./test/list_test.cpp:60:17: note: in instantiation of function template specialization 'ft::list<int, std::__1::allocator<int> >::list<ft::list_iterator<int> >' requested here
                ft::list<int> range(m.begin(), m.end());
                              ^
./test/../list.hpp:102:15: note: previous definition is here
                friend bool     operator==(const self & x, const self & y)
                                ^
./test/../list.hpp:217:34: error: no viable conversion from returned value of type 'ft::list<int, std::__1::allocator<int> >::const_iterator' (aka 'list_const_iterator<int>') to function return type 'ft::list<int, std::__1::allocator<int> >::iterator' (aka 'list_iterator<int>')
                        iterator end() const { return (const_iterator(_last)); }
                                                      ^~~~~~~~~~~~~~~~~~~~~~~
./test/../list.hpp:191:12: note: in instantiation of member function 'ft::list<int, std::__1::allocator<int> >::end' requested here
                                insert(end(), first, last);
                                       ^
./test/list_test.cpp:60:17: note: in instantiation of function template specialization 'ft::list<int, std::__1::allocator<int> >::list<ft::list_iterator<int> >' requested here
                ft::list<int> range(m.begin(), m.end());
                              ^
./test/../list.hpp:47:3: note: candidate constructor not viable: no known conversion from 'ft::list<int, std::__1::allocator<int> >::const_iterator' (aka 'list_const_iterator<int>') to 'ft::list_iterator<int>::node *' (aka 'list_node<int> **') for 1st argument
                list_iterator(node * srcnode) : node(srcnode) {}
                ^
./test/../list.hpp:48:3: note: candidate constructor not viable: no known conversion from 'ft::list<int, std::__1::allocator<int> >::const_iterator' (aka 'list_const_iterator<int>') to 'const ft::list_iterator<int>::self &' (aka 'const list_iterator<int> &') for 1st argument
                list_iterator(const self & other) : node(other.node) {}
                ^
fatal error: too many errors emitted, stopping now [-ferror-limit=]
20 errors generated.
